void line_to_entry(uint8_t *line, int32_t line_len, logentry_t *l)
{
  uint8_t b[4];
  //l->start = line[START_OFFSET];
  memcpy(&l->start, &line[START_OFFSET], 1);
  //memcpy(b, &line[CNT_OFFSET], 4);
  memcpy(&l->cnt, &line[CNT_OFFSET], 4);
  //l->cnt = *((int32_t *) (b));

  //memcpy(b, &line[U_OFFSET], 4);
  //l->u = *((float *) (b));
  memcpy(&l->u, &line[U_OFFSET], 4);

  //memcpy(b, &line[T_OFFSET], 4);
  //l->t =  *((uint32_t *) (b));
  memcpy(&l->t, &line[T_OFFSET], 4);

  //memcpy(b, &line[Y_OFFSET], 4);
  //l->y = *((float *) (b));
  memcpy(&l->y, &line[Y_OFFSET], 4);

  // l->ctrl = line[CTRL_OFFSET];
  // l->stat = line[STAT_OFFSET];
  // l->end = line[END_OFFSET];
  memcpy(&l->ctrl, &line[CTRL_OFFSET], 1);
  memcpy(&l->stat, &line[STAT_OFFSET], 1);
  memcpy(&l->end, &line[END_OFFSET], 1);
}

  // if(mem.create_file(write_file))
  // {
  //   Serial.printf("Createdd %s\n",write_file);
  // }else
  // {
  //   if(mem.open_file_write(write_file))
  //   {
  //     Serial.printf("Successfully opened %s\n",write_file);
  //   }else
  //   {
  //     Serial.printf("Failed to open %s\n",write_file);
  //     Serial.print("Exists? "); Serial.println(mem.file_exists(write_file));
  //     return;
  // }
  // }
  // uint32_t t;
  // float u;
  // float y;
  // float r;
  // float e;
  // uint8_t ctrl;
  // uint8_t state;
  // mem.l.t = 0;
  // mem.l.y = 0.0f;        //0x3FC00000
  // mem.l.u = 0.0f;      //0x40480000
  // mem.l.r = 0.0f;
  // mem.l.e = 0.0f;
  // mem.l.ctrl = 0x0A;     //0x0A
  // mem.l.state = 0x0B;    //0x0B
  // // float A[3] = {0,102.2342529296875f, 200.543212890625f};
  // // uint8_t n = 3;
  // for(uint32_t i = 0 ; i < 30; i++)
  // {
  //   // uint32_t idx = mem.get_idx();
  //   // A[0] = (float)i;  
  //   // mem.queue_line(A,n);
  //   uint32_t idx = mem.get_idx();
  //   // mem.l.cnt = (int32_t)i;
  //   // mem.l.y   = (float)i;
  //   // mem.l.u   = (float)(i+1);
  //   // mem.l.t   = millis();
  //   // mem.l.stat = 0x42;
  //   // mem.l.ctrl = 0x43;

  //   mem.l.t = millis();
  //   mem.l.y = (float)i;        //0x3FC00000
  //   mem.l.u = (float)(i+1);      //0x40480000
  //   mem.l.r = (float)(i+2);
  //   mem.l.e = (float)(i+3);
  //   mem.l.ctrl = 0x0A;     //0x0A
  //   mem.l.state = 0x0B;    //0x0B
  //   uint32_t t1 = micros();
  //   mem.queue_line_struct();
  //   t1 = micros() - t1;
  //   Serial.printf("------------------------------------------------------------\n");
  //   Serial.printf("dt = %lu.i = %lu, head = %u, tail = %u\n",t1,i, mem.get_head(), mem.get_tail());
  //   mem.display_buffer_interval(idx,mem.get_idx()-1);
  // }
  // Serial.printf("WHOLE BUFFER CONTENTS\n ->");
  // mem.display_buffer_interval(0,mem.get_idx()-1);
  // Serial.printf("<-\n");
  // Serial.printf("FIRST BLOCK OF BUFFER:\n->");
  // mem.display_buffer_interval(0,511);
  // Serial.printf("<-\n");
  // Serial.printf("Writing firs block to %s\n",write_file);
  // uint32_t t1 = micros();
  // uint32_t n_bytes = mem.write_block_to_file();
  // t1 = micros() - t1;
  // Serial.printf("Wrote %lu bytes to %s dt = %u, closing file %s\n",n_bytes, write_file, t1, write_file);
  // mem.close_file(1);
  //  const uint8_t max_n = 20;
  // volatile float A[max_n]; // Prevent compiler optimizations
  // for (uint8_t i = 0; i < max_n; i++) {
  //     A[i] = random(0, 100) * 0.1f; // Populate with random float values
  // }

  //   for (uint8_t n = 1; n <= max_n; n++) {
  //       unsigned long start_time = micros();
  //       mem.queue_line((float *)A, n);
  //       unsigned long end_time = micros();

  //       unsigned long elapsed_time = end_time - start_time;

  //       Serial.print("n = ");
  //       Serial.print(n);
  //       Serial.print(", Execution time: ");
  //       Serial.print(elapsed_time);
  //       Serial.println(" us");

  //       // Access buffer to prevent optimization
  //       Serial.print("First byte in buffer: ");
  //       Serial.println(mem.bfr[0]);
  //       mem.display_buffer_interval(mem.get_idx())
  //   }


  // mem.card_info();
  // uint32_t t1 = micros();
  // uint32_t t2 = micros();
  // int l = snprintf((char*)mem.bfr, STORAGE::BFR_SIZE, "%lu\t%.5f\t%.5f\t%.5f\t%.5f\t%ld\n",t ,ref, e, m, u, cnt_enc);
  // t2 = micros()-t2;
  // mem.write_block_to_file();//((char*)mem.bfr);
  // t1 = micros() - t1;
  // Serial.print("SD card println time: "); Serial.println(t1);
  // Serial.print("snprintf time : "); Serial.println(t2);
  // Serial.print("l = "); Serial.println(l);
  // Serial.print("bfr(l) = "); Serial.print(mem.bfr[l]);
  // Serial.print("bfr(l-1) = "); Serial.print(mem.bfr[l-1]);
  // mem.close_file();
